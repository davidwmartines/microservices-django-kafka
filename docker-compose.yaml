# volumes:
#   postgres_data:

services:

  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      # add this volume to persist database data across restarts
      # - postgres_data:/var/lib/postgresql/data/
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_connections=300"
      - "-c"
      - "max_wal_senders=4"
      - "-c"
      - "max_replication_slots=4"
      # - "-c"
      # - "log_error_verbosity=VERBOSE"
      # - "-c"
      # - "log_statement=all"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - 22181:2181
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 5s
      retries: 20

  kafka:
    image: bitnami/kafka:3.3.1
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      # Note: log compaction settings for demo purposes
      KAFKA_CFG_LOG_CLEANER_MAX_COMPACTION_LAG_MS: 180000
      KAFKA_CFG_LOG_CLEANER_MIN_CLEANABLE_RATIO: 0.1
      KAFKA_CFG_LOG_SEGMENT_BYTES: 100000
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server kafka:9092
      interval: 5s
      retries: 20

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: forward
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8081
      interval: 5s
      retries: 20

  ksqldb:
    build: ./ksqldb
    hostname: ksqldb
    container_name: ksqldb
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8088:8088"
    env_file:
      - ./ksqldb/.env
    volumes:
      - ./ksqldb/project:/project

  orders-service-web:
    container_name: orders-web
    build: 
      context: .
      dockerfile: ./orders-service/Dockerfile
    env_file:
      - ./orders-service/.env
    volumes:
      - ./orders-service:/code
    ports:
      - "8002:8002"
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:8002",
        "--reload",
        "service.wsgi"
      ]
    depends_on:
      - postgres
    restart: always
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8002/health/
      interval: 10s
      retries: 5

  orders-service-cdc-consumer:
    container_name: orders-consumer-cdc
    build:
      context: .
      dockerfile: ./orders-service/Dockerfile
    env_file:
      - ./orders-service/.env
    command:
      [
        "./manage.py",
        "consume_events",
        "--topic",
        "private_orders_order_cdc",
        "--consumer_group_id",
        "orders-consumer-1",
        "--handler",
        "orders.handlers.OrderCDCSchemaConverter"
      ]
    depends_on:
      schema-registry:
        condition: service_healthy
    restart: always

  customer-service-web:
    container_name: customer-web
    build: 
      context: .
      dockerfile: ./customer-service/Dockerfile
    env_file:
      - ./customer-service/.env
    volumes:
      - ./customer-service:/code
    ports:
      - "8001:8001"
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:8001",
        "--reload",
        "service.wsgi"
      ]
    depends_on:
      - postgres
    restart: always
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8001/health/
      interval: 10s
      retries: 5

  points-service-web:
    container_name: points-web
    build: 
      context: .
      dockerfile: ./points-service/Dockerfile
    env_file:
      - ./points-service/.env
    volumes:
      - ./points-service:/code
    ports:
      - "8003:8003"
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:8003",
        "--reload",
        "service.wsgi"
      ]
    depends_on:
      - postgres
    restart: always
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8003/health/
      interval: 10s
      retries: 5

  points-service-customer-consumer:
    container_name: points-customer-consumer
    build: 
      context: .
      dockerfile: ./points-service/Dockerfile
    env_file:
      - ./points-service/.env
    command:
      [
        "./manage.py",
        "consume_events",
        "--topic",
        "public_customer_entity_events",
        "--consumer_group_id",
        "points-consumer-1",
        "--handler",
        "points.handlers.CustomerEventHandler"
      ]
    depends_on:
      schema-registry:
        condition: service_healthy
    restart: always

  points-service-order-consumer:
    container_name: points-order-consumer
    build: 
      context: .
      dockerfile: ./points-service/Dockerfile
    env_file:
      - ./points-service/.env
    command:
      [
        "./manage.py",
        "consume_events",
        "--topic",
        "public_order_entity_events",
        "--consumer_group_id",
        "points-consumer-2",
        "--handler",
        "points.handlers.OrderEventHandler"
      ]
    depends_on:
      schema-registry:
        condition: service_healthy
    restart: always
