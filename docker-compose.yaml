version: '3.7'

volumes:
  postgres_data:


services:

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - postgres_data:/var/lib/postgresql/data/
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_connections=300"
      - "-c"
      - "max_wal_senders=4"
      - "-c"
      - "max_replication_slots=4"
      # - "-c"
      # - "log_error_verbosity=VERBOSE"
      # - "-c"
      # - "log_statement=all"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - 22181:2181
    
  kafka:
    image: bitnami/kafka:3.3.1
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      # Note: log compaction settings for demo purposes
      KAFKA_CFG_LOG_CLEANER_MAX_COMPACTION_LAG_MS: 180000
      KAFKA_CFG_LOG_CLEANER_MIN_CLEANABLE_RATIO: 0.1
      KAFKA_CFG_LOG_SEGMENT_BYTES: 100000

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: forward

  ksqldb:
    build: ./ksqldb
    hostname: ksqldb
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    env_file:
      - ./ksqldb/.env
    volumes:
      - ./ksqldb/migrations:/migrations

  person-service-migrate:
    build: ./person-service
    env_file:
      - ./person-service/.env
    volumes:
      - ./wait-for-it.sh:/code/wait-for-it.sh
    command:
      [
        "./wait-for-it.sh",
        "postgres:5432",
        "--",
        "./manage.py",
        "migrate",
        "--noinput"
      ]
    depends_on:
      - postgres

  person-service-web:
    build: ./person-service
    env_file:
      - ./person-service/.env
    volumes:
      - ./person-service:/code
    ports:
      - "8001:8001"
    command:
      [
        "gunicorn",
        "--bind",
        "0.0.0.0:8001",
        "--reload",
        "service.wsgi"
      ]
    depends_on:
      - person-service-migrate
